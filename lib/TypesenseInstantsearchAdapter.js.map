{"version":3,"sources":["../src/TypesenseInstantsearchAdapter.js"],"names":["TypesenseInstantsearchAdapter","options","configuration","Configuration","validate","typesenseClient","TypesenseSearchClient","server","searchClient","search","instantsearchRequests","searchTypesenseAndAdapt","searchForFacetValues","searchTypesenseForFacetValuesAndAdapt","_adaptAndPerformTypesenseRequest","typesenseResponse","adaptedResponses","results","map","typesenseResult","index","_validateTypesenseResult","responseAdapter","SearchResponseAdapter","adapt","_fixFacetCounts","console","error","FacetSearchResponseAdapter","requestAdapter","SearchRequestAdapter","request","Error","code","hits","grouped_hits","primaryResponse","ancillaryResponses","log","length","forEach","ancillaryResponse","Object","keys","facets","facetFieldName","facetFieldValue"],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport { Configuration } from \"./Configuration\";\nimport { SearchClient as TypesenseSearchClient } from \"typesense\";\nimport { SearchRequestAdapter } from \"./SearchRequestAdapter\";\nimport { SearchResponseAdapter } from \"./SearchResponseAdapter\";\nimport { FacetSearchResponseAdapter } from \"./FacetSearchResponseAdapter\";\n\nexport default class TypesenseInstantsearchAdapter {\n  constructor(options) {\n    this.configuration = new Configuration(options);\n    this.configuration.validate();\n    this.typesenseClient = new TypesenseSearchClient(this.configuration.server);\n    this.searchClient = {\n      search: (instantsearchRequests) => this.searchTypesenseAndAdapt(instantsearchRequests),\n      searchForFacetValues: (instantsearchRequests) =>\n        this.searchTypesenseForFacetValuesAndAdapt(instantsearchRequests),\n    };\n  }\n\n  async searchTypesenseAndAdapt(instantsearchRequests) {\n    let typesenseResponse;\n    try {\n      typesenseResponse = await this._adaptAndPerformTypesenseRequest(instantsearchRequests);\n\n      const adaptedResponses = typesenseResponse.results.map((typesenseResult, index) => {\n        this._validateTypesenseResult(typesenseResult);\n        const responseAdapter = new SearchResponseAdapter(\n          typesenseResult,\n          instantsearchRequests[index],\n          this.configuration\n        );\n        return responseAdapter.adapt();\n      });\n\n      this._fixFacetCounts(adaptedResponses);\n\n      return {\n        results: adaptedResponses,\n      };\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  }\n\n  async searchTypesenseForFacetValuesAndAdapt(instantsearchRequests) {\n    let typesenseResponse;\n    try {\n      typesenseResponse = await this._adaptAndPerformTypesenseRequest(instantsearchRequests);\n\n      const adaptedResponses = typesenseResponse.results.map((typesenseResult, index) => {\n        this._validateTypesenseResult(typesenseResult);\n        const responseAdapter = new FacetSearchResponseAdapter(\n          typesenseResult,\n          instantsearchRequests[index],\n          this.configuration\n        );\n        return responseAdapter.adapt();\n      });\n\n      return adaptedResponses;\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  }\n\n  async _adaptAndPerformTypesenseRequest(instantsearchRequests) {\n    const requestAdapter = new SearchRequestAdapter(instantsearchRequests, this.typesenseClient, this.configuration);\n    const typesenseResponse = await requestAdapter.request();\n    return typesenseResponse;\n  }\n\n  _validateTypesenseResult(typesenseResult) {\n    if (typesenseResult.error) {\n      throw new Error(`${typesenseResult.code} - ${typesenseResult.error}`);\n    }\n    if (!typesenseResult.hits && !typesenseResult.grouped_hits) {\n      throw new Error(`Did not find any hits. ${typesenseResult.code} - ${typesenseResult.error}`);\n    }\n  }\n\n  _fixFacetCounts(adaptedResponses) {\n    const [primaryResponse, ...ancillaryResponses] = adaptedResponses;\n\n    console.log(ancillaryResponses.length);\n\n    ancillaryResponses.forEach((ancillaryResponse) => {\n      console.log(ancillaryResponse);\n      Object.keys(ancillaryResponse.facets).forEach((facetFieldName) => {\n        Object.keys(ancillaryResponse.facets[facetFieldName]).forEach((facetFieldValue) => {\n          console.log(\n            `${facetFieldName} ${facetFieldValue} ${ancillaryResponse.facets[facetFieldName][facetFieldValue]}`\n          );\n          if (primaryResponse.facets[facetFieldName][facetFieldValue]) {\n            ancillaryResponse.facets[facetFieldName][facetFieldValue] =\n              primaryResponse.facets[facetFieldName][facetFieldValue];\n          }\n        });\n      });\n    });\n\n    console.log(adaptedResponses);\n  }\n}\n"],"file":"TypesenseInstantsearchAdapter.js"}