{"version":3,"sources":["../src/SearchRequestAdapter.js"],"names":["SearchRequestAdapter","instantsearchRequests","typesenseClient","additionalSearchParameters","collectionSpecificSearchParameters","facetFilters","adaptedResult","intermediateFacetFilters","flat","forEach","facetFilter","facetFilterMatches","match","RegExp","facetName","facetValue","push","Object","entries","map","facet","values","join","numericFilters","filtersHash","filter","field","operator","value","adaptedFilters","keys","console","warn","JSON","stringify","_adaptFacetFilters","_adaptNumericFilters","indexName","constructor","INDEX_NAME_MATCHING_REGEX","instantsearchRequest","params","adaptedCollectionName","_adaptIndexName","snakeCasedAdditionalSearchParameters","key","_camelToSnakeCase","typesenseSearchParams","assign","adaptedSortBy","_adaptSortBy","collection","q","query","facet_by","facets","filter_by","_adaptFilters","sort_by","sortBy","max_facet_values","maxValuesPerFacet","page","hitsPerPage","per_page","facetQuery","facet_query","str","split","toLowerCase","searches","_buildSearchParameters","multiSearch","perform"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexport class SearchRequestAdapter {\n  static get INDEX_NAME_MATCHING_REGEX() {\n    return new RegExp(\"^(.+?)(?=(/sort/(.*))|$)\");\n  }\n\n  constructor(\n    instantsearchRequests,\n    typesenseClient,\n    additionalSearchParameters,\n    collectionSpecificSearchParameters\n  ) {\n    this.instantsearchRequests = instantsearchRequests;\n    this.typesenseClient = typesenseClient;\n    this.additionalSearchParameters = additionalSearchParameters;\n    this.collectionSpecificSearchParameters = collectionSpecificSearchParameters;\n  }\n\n  _adaptFacetFilters(facetFilters) {\n    let adaptedResult = \"\";\n\n    if (!facetFilters) {\n      return adaptedResult;\n    }\n\n    const intermediateFacetFilters = {};\n\n    // Need to transform:\n    // faceFilters = [[\"facet1:value1\", \"facet1:value2\"], \"facet2:value3\"]]\n    //\n    // Into this:\n    // intermediateFacetFilters = {\n    //     \"facet1\": [\"value1\", \"value2\"],\n    //     \"facet2\": [\"value1\", \"value2\"]\n    // }\n\n    facetFilters.flat().forEach(facetFilter => {\n      const facetFilterMatches = facetFilter.match(\n        new RegExp(\"(.*)((?!:).):(?!:)(.*)\")\n      );\n      const facetName = `${facetFilterMatches[1]}${facetFilterMatches[2]}`;\n      const facetValue = `${facetFilterMatches[3]}`;\n      intermediateFacetFilters[facetName] =\n        intermediateFacetFilters[facetName] || [];\n      intermediateFacetFilters[facetName].push(facetValue);\n    });\n\n    // Need to transform this:\n    // intermediateFacetFilters = {\n    //     \"facet1\": [\"value1\", \"value2\"],\n    //     \"facet2\": [\"value1\"]\n    // }\n    //\n    // Into this:\n    // facet1:=[value1,value2] && facet2:=value1\n\n    adaptedResult = Object.entries(intermediateFacetFilters)\n      .map(([facet, values]) => `${facet}:=[${values.join(\",\")}]`)\n      .join(\" && \");\n\n    return adaptedResult;\n  }\n\n  _adaptNumericFilters(numericFilters) {\n    // Need to transform this:\n    // [\"field1<=634\", \"field1>=289\", \"field2<=5\", \"field3>=3\"]\n    // to:\n    // \"field1:=[634..289] && field2:<=5 && field3:>=3\"\n    let adaptedResult = \"\";\n\n    if (!numericFilters) {\n      return adaptedResult;\n    }\n\n    // Transform to intermediate structure:\n    // {\n    //   field1: {\n    //     \"<=\": 634,\n    //     \">=\": 289\n    //   },\n    //   field2: {\n    //     \"<=\": 5\n    //   },\n    //   field3: {\n    //     \">=\": 3\n    //   }\n    // };\n    const filtersHash = {};\n    numericFilters.forEach(filter => {\n      const [, field, operator, value] = filter.match(\n        new RegExp(\"(.*)(<=|>=|>|<|:)(.*)\")\n      );\n      filtersHash[field] = filtersHash[field] || {};\n      filtersHash[field][operator] = value;\n    });\n\n    // Transform that to:\n    //  \"field1:=[634..289] && field2:<=5 && field3:>=3\"\n    const adaptedFilters = [];\n    Object.keys(filtersHash).forEach(field => {\n      if (\n        filtersHash[field][\"<=\"] != null &&\n        filtersHash[field][\">=\"] != null\n      ) {\n        adaptedFilters.push(\n          `${field}:=[${filtersHash[field][\">=\"]}..${filtersHash[field][\"<=\"]}]`\n        );\n      } else if (filtersHash[field][\"<=\"] != null) {\n        adaptedFilters.push(`${field}:<=${filtersHash[field][\"<=\"]}`);\n      } else if (filtersHash[field][\">=\"] != null) {\n        adaptedFilters.push(`${field}:>=${filtersHash[field][\">=\"]}`);\n      } else {\n        console.warn(\n          `Unsupported operator found ${JSON.stringify(filtersHash[field])}`\n        );\n      }\n    });\n\n    adaptedResult = adaptedFilters.join(\" && \");\n    return adaptedResult;\n  }\n\n  _adaptFilters(facetFilters, numericFilters) {\n    const adaptedFilters = [];\n\n    adaptedFilters.push(this._adaptFacetFilters(facetFilters));\n    adaptedFilters.push(this._adaptNumericFilters(numericFilters));\n\n    return adaptedFilters.filter(filter => filter !== \"\").join(\" && \");\n  }\n\n  _adaptIndexName(indexName) {\n    return indexName.match(this.constructor.INDEX_NAME_MATCHING_REGEX)[1];\n  }\n\n  _adaptSortBy(indexName) {\n    return indexName.match(this.constructor.INDEX_NAME_MATCHING_REGEX)[3];\n  }\n\n  _buildSearchParameters(instantsearchRequest) {\n    const params = instantsearchRequest.params;\n    const indexName = instantsearchRequest.indexName;\n    const adaptedCollectionName = this._adaptIndexName(indexName);\n\n    // Convert all common parameters to snake case\n    const snakeCasedAdditionalSearchParameters = {};\n    for (const [key, value] of Object.entries(\n      this.additionalSearchParameters\n    )) {\n      snakeCasedAdditionalSearchParameters[this._camelToSnakeCase(key)] = value;\n    }\n\n    // Override, collection specific parameters\n    if (this.collectionSpecificSearchParameters[adaptedCollectionName]) {\n      for (const [key, value] of Object.entries(\n        this.collectionSpecificSearchParameters[adaptedCollectionName]\n      )) {\n        snakeCasedAdditionalSearchParameters[\n          this._camelToSnakeCase(key)\n        ] = value;\n      }\n    }\n\n    const typesenseSearchParams = Object.assign(\n      {},\n      snakeCasedAdditionalSearchParameters\n    );\n\n    const adaptedSortBy = this._adaptSortBy(indexName);\n\n    Object.assign(typesenseSearchParams, {\n      collection: adaptedCollectionName,\n      q: params.query === \"\" ? \"*\" : params.query,\n      facet_by: [params.facets].flat().join(\",\"),\n      filter_by: this._adaptFilters(params.facetFilters, params.numericFilters),\n      sort_by: adaptedSortBy || this.additionalSearchParameters.sortBy,\n      max_facet_values: params.maxValuesPerFacet,\n      page: (params.page || 0) + 1\n    });\n\n    if (params.hitsPerPage) {\n      typesenseSearchParams.per_page = params.hitsPerPage;\n    }\n\n    if (params.facetQuery) {\n      typesenseSearchParams.facet_query = `${params.facetName}:${params.facetQuery}`;\n      typesenseSearchParams.per_page = 0;\n    }\n\n    // console.log(params);\n    // console.log(typesenseSearchParams);\n\n    return typesenseSearchParams;\n  }\n\n  _camelToSnakeCase(str) {\n    return str\n      .split(/(?=[A-Z])/)\n      .join(\"_\")\n      .toLowerCase();\n  }\n\n  async request() {\n    const searches = this.instantsearchRequests.map(instantsearchRequest =>\n      this._buildSearchParameters(instantsearchRequest)\n    );\n\n    return this.typesenseClient.multiSearch.perform({ searches: searches });\n  }\n}\n"],"file":"SearchRequestAdapter.js"}